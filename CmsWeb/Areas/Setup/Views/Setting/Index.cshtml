@using CmsWeb.Areas.Setup.Models
@using UtilityExtensions
@model CmsWeb.Areas.Setup.Models.SettingModel
@{
    Layout = ViewExtensions2.TouchPointLayout();
    ViewBag.Title = "Settings";
    ViewBag.PageHeader = "Settings";
}
@section head{
    <meta name="format-detection" content="telephone=no" />
    @Fingerprint.Css("/Content/touchpoint/lib/bootstrap-editable/css/bootstrap-editable.css")
    <link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
    <style>
        .btn-link i {
            transition: transform ease 0.3s;
            transform: rotate(90deg);
            margin-right: 10px;
        }

        .btn-link.collapsed i {
            transform: rotate(0deg);
        }

        .btn-link:focus, .btn-link:active {
            outline: 0 !important;
            border: 0 !important;
        }

        .btn-link {
            text-decoration: none !important;
        }

        label {
            font-weight: normal;
            margin-bottom: 0;
        }

        .panel-body {
            padding: 0 !important;
        }

        .dow {
            display: none;
        }

        .day {
            width: 25px !important;
        }

        .prev:after {
            content: "\02C2"
        }

        .next:after {
            content: "\02C3"
        }
    </style>
}
<div class="row">
    <div class="col-lg-9">
        <div class="box box-responsive">
            <div class="box-title-btn">
                <div class="box-tools">
                    <a href="#" class="btn btn-success create-new" data-add-setting><i class="fa fa-plus-circle"></i> Add Setting</a>
                </div>
            </div>
            <div class="box-content">
                <ul class="nav nav-pills subnav hidden-sm hidden-xs">
                    <li class="settings-type-tab active" data-id="1">
                        <a href="#general" data-toggle="tab">
                            <span>General</span>
                        </a>
                    </li>
                    @for (var i = 0; i < Model.SettingTypes.Count; i++)
                    {
                        <li class="resource-type-tab" data-id="@Model.SettingTypes[i].SettingType.SettingTypeId">
                            <a href="#@Model.SettingTypes[i].SettingType.Name.SlugifyString()" data-toggle="tab">
                                <span>@Model.SettingTypes[i].SettingType.Name</span>
                            </a>
                        </li>
                    }
                </ul>
                <div class="tab-content" style="border: none">
                    <div class="tab-pane active" id="general">
                        <div class="accordion" id="accordion-general-settings">
                            <div class="panel panel-default">
                                <div class="panel-heading" id="general-settings">
                                    <h4 style="margin:0;">
                                        <button class="btn btn-link notcollapsed" type="button" data-toggle="collapse" data-target="#general-accordion" aria-expanded="true" aria-controls="general-accordion">
                                            <i class="fa fa-chevron-right"></i> All
                                        </button>
                                    </h4>
                                </div>
                                <div id="general-accordion" class="collapse in" data-parent="#accordion-general-settings">
                                    @Html.Partial("_Settings", new SettingListModel(Model.Settings) { CanDelete = true })
                                </div>
                            </div>
                        </div>
                    </div>
                    @for (int i = 0; i < Model.SettingTypes.Count; i++)
                    {
                        var settingTypeGroup = Model.SettingTypes[i];

                        <div class="tab-pane"
                             id="@settingTypeGroup.SettingType.Name.SlugifyString()">
                            <div class="accordion" id="accordion-@(i)" role="tablist">
                                @foreach (var category in settingTypeGroup.Settings.GroupBy(x => x.SettingCategory).OrderBy(x => x.Key.DisplayOrder))
                                {
                                    <div class="panel panel-default">
                                        <div class="panel-heading" id="@i-@category.Key.SettingCategoryId">
                                            <h4 style="margin: 0;">
                                                <button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapse-@i-@category.Key.SettingCategoryId" aria-expanded="true" aria-controls="test">
                                                    <i class="fa fa-chevron-right"></i> @category.Key.Name
                                                </button>
                                            </h4>
                                        </div>
                                        <div id="collapse-@i-@category.Key.SettingCategoryId" class="collapse" data-parent="#accordion-@(i)">
                                            @Html.Partial("_Settings", new SettingListModel(settingTypeGroup.Settings) { CanDelete = false })
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                <a href="#" class="btn btn-success btn-block visible-xs-block create-new"><i class="fa fa-plus-circle"></i> Add Setting</a>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="new-modal">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            @using (Html.BeginForm("Create", "Setting"))
            {
                @Html.Hidden("type", ViewData["type"])
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Add Setting</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="Id" class="control-label">Setting Code</label>
                        @Html.TextBox("Id", "", new { @class = "form-control" })
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="button" value="Cancel" class="btn btn-default" data-dismiss="modal" />
                    <input type="submit" value="Submit" class="btn btn-primary" />
                </div>
            }
        </div>
    </div>
</div>
@section scripts
{
    @Fingerprint.Script("/Content/touchpoint/lib/bootstrap-editable/js/bootstrap-editable.min.js")
    <script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
    <script type="text/javascript">
        function toggleCurrentTab() {
            if (tab === '#tab-general' || tab === '#tab-misc' || tab === '#tab-miscellaneous')
                $('[data-add-setting]').show();
            else
                $('[data-add-setting]').hide();
        }
        
        $(function() {
            $.fn.editableform.buttons = '<button type="submit" class="btn btn-primary btn-sm editable-submit">' +
                '<i class="fa fa-fw fa-check"></i>' +
                '</button>' +
                '<button type="button" class="btn btn-default btn-sm editable-cancel">' +
                '<i class="fa fa-fw fa-times"></i>' +
                '</button>';

            $(".clickEdit").editable({
                mode: 'inline',
                type: 'text',
                url: "/Setting/Edit/"
            });

            $(".edit-datetime").editable({
                datepicker: {
                    todayBtn: true
                },
                clear: false
            });

            $('.boolean-toggle').on('change', function () {
                $.ajax({
                    type: 'POST',
                    url: '/Setting/Edit',
                    data: { pk: $(this).attr('name'), value: $(this).prop('checked') }
                });
            });

            $("a.delete").click(function(e) {
                e.preventDefault();
                var id = $(this).attr("id");
                swal({
                        title: "Are you sure?",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonClass: "btn-danger",
                        confirmButtonText: "Yes, delete it!",
                        closeOnConfirm: false
                    },
                    function() {
                        $.post("/Setting/Delete/" + id,
                            null,
                            function(ret) {
                                if (ret && ret.error)
                                    swal("Error!", ret.error, "error");
                                else {
                                    swal({
                                            title: "Deleted!",
                                            type: "success"
                                        },
                                        function() {
                                            window.location = "/Settings/";
                                        });
                                }
                            });
                    });
            });

            $("a.create-new").click(function(ev) {
                ev.preventDefault();
                $('#new-modal').modal();
                return false;
            });

            $('#new-modal').on('shown.bs.modal',
                function() {
                    $("#Id").val('').focus();
                });

            $('[data-toggle="popover"]').popover({ html: true });
            $('[data-toggle="popover"]').click(function(ev) {
                ev.preventDefault();
            });

            // positions scrollbar and highlights new setting.
            var hash = document.location.hash;
            if (hash && hash.search('#tab') != 0) {
                var offset = $(hash).offset();
                offset.top -= 80;
                $('body').animate({ scrollTop: offset.top }, 500);

                var row = $(hash).closest('tr');
                var bgColor = $(row).css('background-color');
                $(row).animate({ backgroundColor: '#eaab00' },
                    1000,
                    function() {
                        $(row).animate({ backgroundColor: bgColor }, 1000);
                    });
            }

            var tab = window.location.hash;

            @foreach (SettingTypeModel settingTypeModel in Model.SettingTypes)
            {
                <text>
                    if (tab === '#tab-@settingTypeModel.SettingType.Name.SlugifyString()') {
                        var id = "#@settingTypeModel.SettingType.Name.SlugifyString()";
                        $("a[href='" + id + "']").click().tab("show");
                        $("option[value='" + id + "']").prop('selected', true);
                    }
                </text>
            }

            $('a[data-toggle="tab"]').on('shown.bs.tab',
                function(e) {
                    e.preventDefault();
                    var tab = $(e.target).attr('href').replace("#", "#tab-");
                    window.location.hash = tab;
                    localStorage.setItem('last-settings-tab', tab);

                    toggleCurrentTab();
                });

            var lastTab = localStorage.getItem('last-settings-tab');
            if (window.location.hash) {
                lastTab = window.location.hash;
            }
            if (lastTab) {
                var tlink = $("a[href='" + lastTab.replace("tab-", "") + "']");
                if (tlink.attr("href") !== '#') {
                    localStorage.setItem('last-settings-tab', tlink.attr("href").replace('#', '#tab-'));
                    tlink.click().tab("show");
                }
            }

            toggleCurrentTab();
        });
    </script>
}
